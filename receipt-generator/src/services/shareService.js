// Share service for receipt sharing functionality

// Generate shareable text content
const generateShareText = (receiptData, calculations) => {
  const { subtotal, tax, total } = calculations || { subtotal: 0, tax: 0, total: 0 }
  
  return `Receipt from ${receiptData.storeName || 'Store'}

Receipt #: ${receiptData.receiptNumber || 'Not set'}
Date: ${receiptData.receiptDate || new Date().toISOString().split('T')[0]}

Customer: ${receiptData.billTo?.name || 'Customer Name'}
${receiptData.billTo?.company ? `Company: ${receiptData.billTo.company}` : ''}

Items:
${receiptData.items && receiptData.items.length > 0 ? 
  receiptData.items.map(item => 
    `â€¢ ${item.name || 'Unnamed Item'} - Qty: ${item.qty || 0} - $${(item.unitPrice || 0).toFixed(2)} each = $${((item.qty || 0) * (item.unitPrice || 0)).toFixed(2)}`
  ).join('\n') : 
  'No items added'
}

Subtotal: $${subtotal.toFixed(2)}
${receiptData.discount && receiptData.discount > 0 ? `Discount: -$${receiptData.discount.toFixed(2)}` : ''}
Tax (${receiptData.taxRate || 0}%): $${tax.toFixed(2)}
Total: $${total.toFixed(2)}

Generated by ReceiptGen`
}

// Share via Web Share API
const shareViaWebAPI = async (receiptData, calculations) => {
  if (!navigator.share) {
    throw new Error('Web Share API not supported')
  }

  const shareText = generateShareText(receiptData, calculations)
  
  try {
    await navigator.share({
      title: `Receipt ${receiptData.receiptNumber || 'Receipt'}`,
      text: shareText,
      url: window.location.href
    })
    return { success: true, method: 'web-api' }
  } catch (error) {
    if (error.name === 'AbortError') {
      return { success: false, cancelled: true }
    }
    throw error
  }
}

// Share via email
const shareViaEmail = (receiptData, calculations) => {
  const shareText = generateShareText(receiptData, calculations)
  const subject = `Receipt ${receiptData.receiptNumber || 'Receipt'} from ${receiptData.storeName || 'Store'}`
  const body = encodeURIComponent(shareText)
  
  const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${body}`
  window.open(mailtoLink, '_blank')
  
  return { success: true, method: 'email' }
}

// Copy to clipboard
const copyToClipboard = async (receiptData, calculations) => {
  const shareText = generateShareText(receiptData, calculations)
  
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(shareText)
    } else {
      // Fallback for older browsers
      const textArea = document.createElement('textarea')
      textArea.value = shareText
      textArea.style.position = 'fixed'
      textArea.style.left = '-999999px'
      textArea.style.top = '-999999px'
      document.body.appendChild(textArea)
      textArea.focus()
      textArea.select()
      document.execCommand('copy')
      textArea.remove()
    }
    
    return { success: true, method: 'clipboard' }
  } catch (error) {
    throw new Error('Failed to copy to clipboard')
  }
}

// Generate shareable link (for future implementation)
const generateShareableLink = (receiptData) => {
  // This would typically involve saving the receipt data to a backend
  // and generating a unique URL that can be shared
  const baseUrl = window.location.origin
  const receiptId = receiptData.receiptNumber || Date.now().toString()
  return `${baseUrl}/share/${receiptId}`
}

// Main share function with fallbacks
const shareReceipt = async (receiptData, calculations) => {
  try {
    // Try Web Share API first
    if (navigator.share) {
      return await shareViaWebAPI(receiptData, calculations)
    }
    
    // If Web Share API is not available, show options
    const options = []
    
    // Check if email is available
    if (navigator.userAgent.includes('mailto:')) {
      options.push({ name: 'Email', action: () => shareViaEmail(receiptData, calculations) })
    }
    
    // Always offer clipboard copy
    options.push({ 
      name: 'Copy to Clipboard', 
      action: () => copyToClipboard(receiptData, calculations) 
    })
    
    // Show user choice dialog
    const choice = await showShareOptions(options)
    
    if (choice) {
      return await choice.action()
    }
    
    return { success: false, cancelled: true }
    
  } catch (error) {
    console.error('Share failed:', error)
    throw error
  }
}

// Show share options dialog
const showShareOptions = async (options) => {
  return new Promise((resolve) => {
    // Create modal dialog
    const modal = document.createElement('div')
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'
    
    const dialog = document.createElement('div')
    dialog.className = 'bg-white rounded-lg p-6 max-w-md w-full mx-4'
    
    dialog.innerHTML = `
      <h3 class="text-lg font-semibold mb-4">Share Receipt</h3>
      <p class="text-gray-600 mb-4">Choose how you'd like to share this receipt:</p>
      <div class="space-y-2">
        ${options.map((option, index) => `
          <button 
            class="w-full text-left p-3 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors"
            data-option="${index}"
          >
            ${option.name}
          </button>
        `).join('')}
      </div>
      <div class="mt-4 flex justify-end">
        <button 
          class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
          data-cancel
        >
          Cancel
        </button>
      </div>
    `
    
    modal.appendChild(dialog)
    document.body.appendChild(modal)
    
    // Handle clicks
    const handleClick = (e) => {
      const optionIndex = e.target.getAttribute('data-option')
      const isCancel = e.target.hasAttribute('data-cancel')
      
      if (optionIndex !== null) {
        document.body.removeChild(modal)
        resolve(options[parseInt(optionIndex)])
      } else if (isCancel) {
        document.body.removeChild(modal)
        resolve(null)
      }
    }
    
    dialog.addEventListener('click', handleClick)
    
    // Handle escape key
    const handleKeydown = (e) => {
      if (e.key === 'Escape') {
        document.body.removeChild(modal)
        resolve(null)
      }
    }
    
    document.addEventListener('keydown', handleKeydown)
    
    // Cleanup
    const cleanup = () => {
      document.removeEventListener('keydown', handleKeydown)
    }
    
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal)
        cleanup()
        resolve(null)
      }
    })
  })
}

export const shareService = {
  shareReceipt,
  shareViaWebAPI,
  shareViaEmail,
  copyToClipboard,
  generateShareableLink,
  generateShareText
}
